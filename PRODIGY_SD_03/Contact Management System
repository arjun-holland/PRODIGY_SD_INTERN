#include <bits/stdc++.h>
using namespace std;

// Structure to hold contact information
struct Contact {
    string name;
    string phone;
    string email;
};

// Function to display all contacts
void displayContacts(const vector<Contact>& contacts) {
    if (contacts.empty()) {
        cout << "No contacts available." << endl;
        return;
    }
    for (size_t i = 0; i < contacts.size(); i++) {
        cout << i + 1 << ". Name: " << contacts[i].name
             << ", Phone: " << contacts[i].phone
             << ", Email: " << contacts[i].email << endl;
    }
}

// Function to add a new contact
void addContact(vector<Contact>& contacts) {
    Contact newContact;
    cout << "Enter name: ";
    cin.ignore();//Clears any leftover newline (\n) characters from the input buffer.
    getline(cin, newContact.name);
    cout << "Enter phone number: ";
    getline(cin, newContact.phone);
    cout << "Enter email address: ";
    getline(cin, newContact.email);
    
    contacts.push_back(newContact);
    cout << "Contact added successfully!" << endl;
}

// Function to edit an existing contact
void editContact(vector<Contact>& contacts) {
    displayContacts(contacts);
    if (contacts.empty()) return;

    int index;
    cout << "Enter the contact number to edit: ";
    cin >> index;
    if (index < 1 || index > contacts.size()) {
        cout << "Invalid contact number." << endl;
        return;
    }

    Contact& contact = contacts[index - 1]; //to make changes in the original contacts we need to use &
    cout << "Editing contact: " << contact.name << endl;
    cout << "Enter new name (leave blank to keep unchanged): ";
    cin.ignore();
    string newName;
    getline(cin, newName);
    if (!newName.empty()) contact.name = newName;

    cout << "Enter new phone number (leave blank to keep unchanged): ";
    string newPhone;
    getline(cin, newPhone);
    if (!newPhone.empty()) contact.phone = newPhone;

    cout << "Enter new email address (leave blank to keep unchanged): ";
    string newEmail;
    getline(cin, newEmail);
    if (!newEmail.empty()) contact.email = newEmail;

    cout << "Contact updated successfully!" << endl;
}

// Function to delete a contact
void deleteContact(vector<Contact>& contacts) {
    displayContacts(contacts);
    if (contacts.empty()) return;

    int index;
    cout << "Enter the contact number to delete: ";
    cin >> index;
    if (index < 1 || index > contacts.size()) {
        cout << "Invalid contact number." << endl;
        return;
    }

    contacts.erase(contacts.begin() + index - 1);
    cout << "Contact deleted successfully!" << endl;
}

// Function to save contacts to a file
void saveContactsToFile(const vector<Contact>& contacts) {
    ofstream file("contacts.txt"); //ofstream: Stands for "output file stream," used to write data to files.
    if (!file) {
        cout << "Error saving contacts to file." << endl;
        return;
    }

    for (const auto& contact : contacts) {
        file << contact.name << "\n" << contact.phone << "\n" << contact.email << "\n";
    }
    file.close();
    cout << "Contacts saved to file successfully!" << endl;
}

// Function to load contacts from a file
void loadContactsFromFile(vector<Contact>& contacts) {
    ifstream file("contacts.txt"); //ifstream: Stands for "input file stream," used to get data from files.
    if (!file) {
        cout << "No saved contacts found." << endl;
        return;
    }

    Contact contact;
    while (getline(file, contact.name) &&
           getline(file, contact.phone) &&
           getline(file, contact.email)) {
        contacts.push_back(contact);
    }
    file.close();
    cout << "Contacts loaded from file successfully!" << endl;
}

int main() {
    vector<Contact> contacts;
    loadContactsFromFile(contacts); // Load saved contacts at the start

    int choice;
    do {
        cout << "\nContact Management System\n";
        cout << "1. View Contacts\n";
        cout << "2. Add Contact\n";
        cout << "3. Edit Contact\n";
        cout << "4. Delete Contact\n";
        cout << "5. Save Contacts to File\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                displayContacts(contacts);
                break;
            case 2:
                addContact(contacts);
                break;
            case 3:
                editContact(contacts);
                break;
            case 4:
                deleteContact(contacts);
                break;
            case 5:
                saveContactsToFile(contacts);
                break;
            case 6:
                cout << "Exiting program..." << endl;
                saveContactsToFile(contacts); // Save before exiting
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 6);

    return 0;
}

